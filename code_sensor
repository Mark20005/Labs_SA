import json
from datetime import timedelta
from airflow import DAG
from airflow.sensors.http_sensor import HttpSensor
from airflow.providers.http.operators.http import SimpleHttpOperator, HttpOperator
from airflow.operators.python import PythonOperator
from airflow.operators.email import EmailOperator
from airflow.utils.dates import days_ago
from airflow.timetables.interval import CronDataIntervalTimetable
import logging
from gov_sanctions.api_gov_sanctions import download_sanctions, save_decree_to_s3, get_last_decree_from_s3, get_api_key


# Default arguments for the DAG
default_args = {
    "owner": "airflow",
    "depends_on_past": False,
    "email_on_failure": False,
    "email_on_retry": True,
    "retries": 0,
    "retry_delay": timedelta(minutes=5),
}

with DAG(
        dag_id='dag_http_sensor_sanctions',
        default_args=default_args,
        catchup=False,
        start_date=days_ago(2),
        timetable=CronDataIntervalTimetable(
            cron='*/30 * * * *',
            timezone='Europe/Kiev'
        ),
        tags=["s3", "airflow", "sanctions"],
) as dag:

    # HTTP Sensor to check for new sanctions
    check_new_sanctions = HttpSensor(
        task_id='check_new_sanctions',
        http_conn_id='selfmanaged_api_gov',
        endpoint='actions/new-decrees',
        request_params={"baseDecree": get_last_decree_from_s3()},
        headers={"accept": "application/json", "x-cota-public-api-key": f'{get_api_key()}'},
        response_check=lambda response: response.json().get('hasNewActions', False),
        poke_interval=30,
        timeout=120
    )

    get_last_decree_from_api = HttpOperator(
        task_id='get_last_decree',
        http_conn_id='selfmanaged_api_gov',
        endpoint='actions/new-decrees',
        method='GET',
        data={"baseDecree": get_last_decree_from_s3()},
        headers={"accept": "application/json", "x-cota-public-api-key": f'{get_api_key()}'},
        log_response=True,
        response_filter=lambda response: response.json()['lastDecree'],
        do_xcom_push=True,
    )

    # Task to download new sanctions
    def download_sanctions_task(**kwargs):
        last_decree = json.loads(kwargs['task_instance'].xcom_pull(task_ids='get_last_decree'))
        logging.info(f'data is {last_decree}')
        download_sanctions('https://api-drs.nsdc.gov.ua/actions', last_decree, 'individual')
        download_sanctions('https://api-drs.nsdc.gov.ua/actions', last_decree, 'legal')
        save_decree_to_s3(last_decree)

    download_sanctions_task = PythonOperator(
        task_id='download_sanctions_task',
        python_callable=download_sanctions_task
    )

    # Email notification for new sanctions
    send_email = EmailOperator(
        task_id='send_email',
        to=['your_email@example.com'],
        subject='New sanctions detected',
        html_content="""
            <h3>New sanctions detected</h3>
            <p>Please review the downloaded sanctions in the S3 bucket.</p>
        """
    )

    # Task dependencies
    check_new_sanctions >> get_last_decree_from_api >> download_sanctions_task >> send_email
