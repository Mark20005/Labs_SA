import requests
import pandas as pd
import io
import os
import logging
import json
import boto3

#Logs
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s -%(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)

env = os.environ.get('ENV')
export_format: str = 'xlsx'
url_main: str = f'https://api-drs.nsdc.gov.ua/actions'
BUCKET_NAME = f'rbua-data-{env}-integration-data-fcmd'
OBJECT_KEY = 'MarkKUCHYK/Sanctions/decree.json'
s3 = boto3.client('s3')
ssm_client = boto3.client('ssm', region_name='eu-central-1')

def get_api_key() -> str:
    response = ssm_client.get_parameter(Name=f'/rbua-data-{env}-data-fcmd/airflow/variables/selfmanaged_api_gov',
                                        WithDecryption=True)
    api_key = response['Parameter']['Value']

    return api_key

headers: dict = {'accept': 'text/csv',
                 'x-cota-public-api-key': f'{get_api_key()}'}

def save_decree_to_s3(decree, bucket=BUCKET_NAME, key=OBJECT_KEY):
    data = []
    try:
        response = s3.get_object(Bucket=bucket, Key=key)
        file_content = response['Body'].read().decode('utf-8')
        data = json.loads(file_content)
    except s3.exceptions.NoSuchKey:
        pass
    except json.JSONDecodeError:
        pass
    data.append(decree)

    s3.put_object(
        Bucket=bucket,
        Key=key,
        Body=json.dumps(data, indent=4)
    )

def get_last_decree_from_s3(bucket=BUCKET_NAME, key=OBJECT_KEY):
    try:
        response = s3.get_object(Bucket=bucket, Key=key)
        file_content = response['Body'].read().decode('utf-8')
        data = json.loads(file_content)

        return data[-1] if data else None
    except s3.exceptions.NoSuchKey:
        return None
    except json.JSONDecodeError:
        return None

def new_sanctions_checker(url: str, decree: str) -> tuple:
    response_check = requests.get(f'{url}/new-decrees?baseDecree={decree}',headers=headers)
    if response_check.status_code == 200:
        data = response_check.json()
        checker = data['hasNewActions']
        last_decree = data['lastDecree']
        logging.info(f'checked new sanctions: {checker}, {last_decree}')
        return checker, last_decree
    else:
        logging.error(f'Error {response_check.status_code}')

def download_sanctions(url:str, decree: str, subject: str):
    response = requests.get(f'{url}/export/{subject}/{export_format}?decree={decree}',headers=headers)

    if response.status_code == 200:
        excel_data = (io.BytesIO(response.content))
        df = pd.read_excel(excel_data, na_values='NULL')
        df['sanctions'] = df['sanctions'].str.replace(';', '/')
        if df.empty:
            logging.warning(f'file is empty for {subject}\'s with decree {decree} ')
        else:
            filename = f'{decree.replace("/","_")}-{subject}.csv'
            if subject == 'individual':
                upload_bucket_name = f'rbua-data-{env}-integration-data-fcmd'
                upload_key = f"MarkKUCHYK/Sanctions/{subject}/{filename}"
                csv_file_path = f's3://{upload_bucket_name}/{upload_key}'
                df.to_csv(csv_file_path, index=False)
                logging.info(f'successfully download {subject} sanctions with decree {decree} ')
            else:
                upload_bucket_name = f'rbua-data-{env}-integration-data-fcmd'
                upload_key = f"MarkKUCHYK/Sanctions/{subject}/{filename}"
                csv_file_path = f's3://{upload_bucket_name}/{upload_key}'
                df.to_csv(csv_file_path, index=False)
                logging.info(f'successfully download {subject} sanctions with decree {decree} ')
    else:
        logging.error(f'error {response.status_code}')


def main():
    try:
        if new_sanctions_checker(url_main, get_last_decree_from_s3())[0]:
            decree_main = get_last_decree_from_s3()
            decree_last = new_sanctions_checker(url_main, decree_main)[1]
            if decree_last != decree_main:
                download_sanctions(url_main, decree_last, subject='individual')
                download_sanctions(url_main, decree_last, subject='legal')
                save_decree_to_s3(decree_last)
                return True
            else:
                logging.info(f'This sanctions already downloaded! {decree_last}')
                return False
        else:
            logging.info("There is no new sanctions")
            return False
    except Exception as e:
        logging.error(f'An error occurred: {e}')
        raise
    finally:
        logging.info('job is ended \n---------------------------')



DAG

import os
import sys
from datetime import timedelta
from airflow import DAG
from airflow.timetables.interval import CronDataIntervalTimetable
from airflow.operators.email import EmailOperator
from airflow.operators.python import PythonOperator, BranchPythonOperator

current_directory = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, current_directory)
from airflow.utils.dates import days_ago
import pathlib
import logging
from gov_sanctions.api_gov_sanctions import main

dags_folder = pathlib.Path(__file__).parent.resolve()

env = os.environ.get('ENV')


def decide_to_send_email(**context):
    if context['task_instance'].xcom_pull(task_ids='check_sanctions_task'):
        logging.info('New sanctions found, email will be sent')
        return 'send_email'
    else:
        logging.info('No new sanctions, email skipped')
        return 'skip_email'

def skip_email() -> None:
    logging.info("Skipping email notification")

default_args = {
    "owner": "airflow",
    'depends_on_past': False,
    'email_on_failure': True,
    'email_on_retry': True,
    'retries': 0,
    'retry_delay': timedelta(minutes=5)
}


with DAG(dag_id='dag_api_gov_sanctions',
         default_args=default_args,
         catchup=False,
         start_date=days_ago(2),
         timetable=CronDataIntervalTimetable(
             cron='*/30 * * * *',
             timezone='Europe/Kiev'),
         tags=["s3","airflow","sanctions"],
         ) as dag:

    check_sanctions_task = PythonOperator(
        task_id='check_sanctions_task',
        python_callable=main,
        dag=dag
    )

    decide_email_task = BranchPythonOperator(
        task_id='decide_email_task',
        python_callable=decide_to_send_email,
        provide_context=True,
        dag=dag
    )

    send_email = EmailOperator(
        task_id='send_email',
        to=['mykhailo.oleksiak@raiffeisen.ua', 'mykhailo.porkhachov@raiffeisen.ua', 'daria.startseva@raiffeisen.ua',
            'mark.kuchyk@raiffeisen.ua', 'anastasiia.tereschuk@raiffeisen.ua', 'oleg.nalyvaiko@raiffeisen.ua',
            'denys.luzan@raiffeisen.ua', 'alla.diduk@raiffeisen.ua', 'oleksandr.mitin@raiffeisen.ua',
            'oleksandr.shchur@raiffeisen.ua', 'oleksii.patora@raiffeisen.ua', 'karine.shyrynian@raiffeisen.ua',
            'olga.kolisnichenko@raiffeisen.ua'],
        subject=f'New sanctions was arrived',
        html_content=f"""
        <h3>Airflow Alert</h3>
        <h5>There new sanctions, time to check it!</h5>
    """,
        dag=dag
    )

    skip_email = PythonOperator(
        task_id='skip_email',
        python_callable=skip_email,
        dag=dag
    )

check_sanctions_task >> decide_email_task >> [send_email, skip_email]
